{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Track.svelte",
    "../../TrackControls.svelte",
    "../../GenerationOptions.svelte",
    "../../PersistenceOptions.svelte",
    "../../TreeVis.svelte",
    "../../Links.svelte",
    "../../Timeline.svelte",
    "../../TrackRowOptions.svelte",
    "../../TrackCanvas.svelte",
    "../../InstrumentCheckbox.svelte",
    "../../ChildButton.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Track from \"./track/Track.svelte\";\n  import GenerationOptions from \"./generationOptions/GenerationOptions.svelte\";\n  import PersistenceOptions from \"./persistence/PersistenceOptions.svelte\";\n  import { audio } from \"./track/audio.js\";\n  import TrackControls from \"./track/TrackControls.svelte\";\n  import TreeVis from \"./treeVis/TreeVis.svelte\";\n  import Links from \"./links/Links.svelte\";\n\n  alert(\"Important Notice\\n\" +\n          \"This is the legacy version of musetree.\\n\" +\n          \"Please visit musetree.stevenwaterman.uk for the latest version.\");\n</script>\n\n<style>\n  .columns {\n    display: grid;\n    grid-template-columns: 1fr 1fr 300px;\n    grid-template-rows: auto;\n    width: 100vw;\n    height: 100vh;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n  }\n\n  :global(body) {\n    padding: 0;\n    margin: 0;\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>\n\n<div class=\"columns\">\n  <div class=\"col\">\n    <Track />\n    <TrackControls />\n  </div>\n  <div class=\"col\">\n    <TreeVis />\n  </div>\n  <div class=\"col\">\n    <GenerationOptions />\n    <PersistenceOptions />\n    <Links />\n  </div>\n</div>\n",
    "<script>\n  import { selectedPathStore, selectedTrackAudioStore } from \"./trackTree.js\";\n  import Timeline from \"./Timeline.svelte\";\n  import TrackRowOptions from \"./TrackRowOptions.svelte\";\n  import TrackCanvas from \"./TrackCanvas.svelte\";\n  import { isScrollingStore } from \"../settings.js\";\n\n  $: rows = $selectedPathStore.map((element, idx, array) => ({\n    path: array.slice(0, idx),\n    selected: array[idx]\n  }));\n</script>\n\n<style>\n  .container {\n    overflow-y: scroll;\n    background-color: black;\n    height: 100%;\n  }\n\n  .placeholder {\n    color: white;\n    text-align: center;\n  }\n</style>\n\n<div class=\"container\" on:wheel={() => isScrollingStore.set(false)}>\n  <Timeline />\n  {#each rows as { path, selected }, idx (JSON.stringify(path) + selected)}\n        <TrackCanvas path={[...path, selected]} section={idx} />\n  {:else}\n    <p class=\"placeholder\">Use the controls below to begin</p>\n  {/each}\n</div>\n<TrackRowOptions path={$selectedPathStore} />\n",
    "<script>\n  import { audio, audioStatusStore } from \"./audio.js\";\n  import {preplayStore, autoScrollStore, yScaleStore, autoPlayStore} from \"../settings.js\";\n</script>\n\n<style>\n  .container {\n    background-color: black;\n    border-top: 1px solid white;\n    flex-shrink: 0;\n    padding: 4px 0;\n  }\n\n  button {\n    margin: 4px;\n  }\n\n  label {\n      color: white;\n  }\n\n  .col {\n      display: flex;\n      flex-direction: column;\n  }\n\n  .row {\n      display: flex;\n      flex-direction: row;\n  }\n\n  .center {\n      justify-content: center;\n      text-align: center;\n  }\n\n  .margin {\n      margin: 0 8px;\n  }\n\n  .slider {\n      width: 100px;\n  }\n</style>\n\n<div class=\"container row center\">\n  {#if $audioStatusStore.playing}\n    <button on:click={audio.pause}>Stop</button>\n  {:else}\n    <button on:click={() => audio.play(0)}>Play</button>\n  {/if}\n\n  <div class=\"col margin\">\n    <label for=\"preplay\">Pre-Play: {$preplayStore}s</label>\n    <input class=\"slider\" id=\"preplay\" bind:value={$preplayStore} type=\"range\" min=\"0\" max=\"5\" step=\"0.5\" />\n  </div>\n\n   <div class=\"col center margin\">\n    <label for=\"autoScroll\">Auto Scroll</label>\n    <input id=\"autoScroll\" type=\"checkbox\" bind:checked={$autoScrollStore} />\n  </div>\n\n  <div class=\"col margin\">\n    <label for=\"yScale\">Zoom: {$yScaleStore}%</label>\n    <input class=\"slider\" id=\"yScale\" bind:value={$yScaleStore} type=\"range\" min=\"10\" max=\"500\" step=\"10\" />\n  </div>\n\n   <div class=\"col center margin\">\n    <label for=\"autoPlay\">Auto Play</label>\n    <input id=\"autoPlay\" type=\"checkbox\" bind:checked={$autoPlayStore} />\n  </div>\n</div>\n",
    "<script>\n  import {\n    genreStore,\n    generationLengthStore,\n    instrumentStores,\n    truncationStore,\n    temperatureStore,\n    autoRequestStore,\n    autoScrollStore,\n    yScaleStore\n  } from \"../settings.js\";\n  import InstrumentCheckbox from \"./InstrumentCheckbox.svelte\";\n  import { genres, instruments } from \"../constants.js\";\n  import {audio} from \"../track/audio.js\";\n</script>\n\n<style>\n  .options {\n      padding: 12px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .slider {\n      width: 100px;\n  }\n\n  .optionElement {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  label {\n      font-weight: 600;\n      margin: 0 8px 0 0;\n  }\n\n  span {\n      margin: 4px;\n  }\n\n  .header {\n    margin: 0;\n  }\n\n  select {\n    margin: 0;\n  }\n\n  input {\n      margin: 0;\n  }\n</style>\n\n<div class=\"options\">\n  <h1 class=\"header\">Generator:</h1>\n  <div class=\"optionElement\">\n    <label for=\"genre\">Genre:</label>\n    <select id=\"genre\" bind:value={$genreStore}>\n      {#each genres as genre}\n        <option value={genre}>{genre}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"optionElement\">\n    <label for=\"generationlength\">Generation Length:</label>\n    <input\n    class=\"slider\"\n    id=\"generationLength\"\n      bind:value={$generationLengthStore}\n      type=\"range\"\n      min=\"20\"\n      max=\"1000\"\n      step=\"10\" />\n      <span>{$generationLengthStore}</span>\n  </div>\n\n  <label>Instruments:</label>\n  {#each instruments as instrument}\n    <InstrumentCheckbox {instrument} />\n  {/each}\n\n  <div class=\"optionElement\">\n    <label for=\"autoRequest\">Auto Request</label>\n    <input id=\"autoRequest\" type=\"checkbox\" bind:checked={$autoRequestStore} />\n  </div>\n</div>\n",
    "<script>\n  import { downloadAudio } from \"../broker.js\";\n  import {\n    trackTreeStore,\n    selectedTrackEncodingStore\n  } from \"../track/trackTree.js\";\n  import download from \"downloadjs\";\n\n  function save() {\n    download(JSON.stringify($trackTreeStore), \"save.json\");\n  }\n\n  const reader = new FileReader();\n  reader.onload = event => {\n    trackTreeStore.set(JSON.parse(event.target.result));\n  };\n\n  function load(event) {\n    reader.readAsText(event.target.files[0]);\n  }\n\n  function exportAudio(format) {\n    downloadAudio($selectedTrackEncodingStore, format, \"export\");\n  }\n\n  $: trackLoaded = $selectedTrackEncodingStore === \"\";\n</script>\n\n<style>\n  .container {\n    padding: 12px;\n  }\n  .row {\n    display: flex;\n    flex-direction: row;\n  }\n  .dropdown-content {\n    display: none;\n    flex-direction: column;\n    position: absolute;\n  }\n  .dropdown:hover .dropdown-content {\n    display: flex;\n  }\n  button {\n    margin: 4px;\n  }\n</style>\n\n<div class=\"container\">\n  <h1>Persistence</h1>\n  <div class=\"row\">\n    <button\n      disabled={Object.keys($trackTreeStore.children).length === 0}\n      on:click={save}>\n      Save\n    </button>\n    <label for=\"upload\">\n      <span>Load</span>\n      <input\n        id=\"upload\"\n        type=\"file\"\n        accept=\".json\"\n        multiple={false}\n        on:change={load}\n        style=\"display:none\" />\n    </label>\n    <div class=\"dropdown\">\n      <button disabled={trackLoaded} class=\"dropbtn\">Export</button>\n      <div class=\"dropdown-content\">\n        <button disabled={trackLoaded} on:click={() => exportAudio('mp3')}>\n          .mp3\n        </button>\n        <button disabled={trackLoaded} on:click={() => exportAudio('wav')}>\n          .wav\n        </button>\n        <button disabled={trackLoaded} on:click={() => exportAudio('ogg')}>\n          .ogg\n        </button>\n        <button disabled={trackLoaded} on:click={() => exportAudio('midi')}>\n          .midi\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import * as d3 from \"d3\";\n  import {\n    d3TreeStore,\n    trackTreeStore,\n    selectedPathStore\n  } from \"../track/trackTree.js\";\n  import { onMount, afterUpdate } from \"svelte\";\n  import { autoPlayStore, preplayStore, configStore } from \"../settings.js\";\n  import { audio } from \"../track/audio.js\";\n  import { fade } from \"svelte/transition\";\n  import { request } from \"../broker.js\";\n\n  const width = 200;\n  const height = 200;\n  const dx = 25;\n  const dy = 50;\n  const linkGenerator = d3.linkVertical();\n\n  let root;\n  let links;\n  $: tree($d3TreeStore);\n\n  function tree(data) {\n    const hierarchy = d3.hierarchy(data);\n    hierarchy.dx = dx;\n    hierarchy.dy = dy;\n\n    root = d3.tree().nodeSize([dx, dy])(hierarchy);\n    links = root.links().map(link => ({\n      d: linkGenerator({\n        source: [link.source.x, link.source.y],\n        target: [link.target.x, link.target.y]\n      }),\n      color: linkColor(link.source, link.target),\n      key:\n        JSON.stringify(link.source.data.path) +\n        \",\" +\n        JSON.stringify(link.target.data.path)\n    }));\n  }\n\n  let transform;\n  function applyTransform() {\n    if (transform == null) return;\n    d3.select(\"#tree\").attr(\"transform\", transform);\n  }\n\n  onMount(() => {\n    d3.select(\"svg\").call(\n      d3.zoom().on(\"zoom\", function() {\n        transform = d3.event.transform;\n        applyTransform();\n      })\n    );\n  });\n\n  afterUpdate(applyTransform);\n\n  function linkColor({ data: source }, { data: target }) {\n    if (source.isSelected && target.isSelected) {\n      return \"#f00\";\n    }\n    if (target.wasSelected) {\n      return \"#f90\";\n    }\n    return \"#fff\";\n  }\n\n  function nodeColor({ wasSelected, isSelected }) {\n    if (isSelected) {\n      return \"#f00\";\n    }\n    if (wasSelected) {\n      return \"#f90\";\n    }\n    return \"#fff\";\n  }\n\n  function select({ path, startsAt }) {\n    trackTreeStore.selectFullPath(path, true);\n    const playFrom = Math.max(0, startsAt - $preplayStore);\n    if ($autoPlayStore) {\n      audio.play(playFrom);\n    }\n  }\n\n  function loadMore({ path, encoding, endsAt }) {\n    const pathCapture = path;\n    trackTreeStore.requestStart(path);\n\n    return request($configStore, encoding, endsAt)\n      .then(tracks => trackTreeStore.addTracks(pathCapture, tracks))\n      .finally(_ => trackTreeStore.requestDone(pathCapture));\n  }\n\n  function remove(path, idx) {\n    trackTreeStore.deleteChild(path.slice(0, -1), idx);\n  }\n</script>\n\n<style>\n  svg {\n    border-left: 1px solid white;\n    height: 100%;\n    width: 100%;\n    flex-shrink: 0;\n    background-color: black;\n  }\n  .label {\n    pointer-events: none;\n  }\n  circle {\n    cursor: pointer;\n  }\n</style>\n\n{#if root != null}\n  <svg viewbox={`${-width / 2} -${height / 2} ${width} ${height}`}>\n    <g id=\"tree\" font-family=\"sans-serif\" font-size=\"10\">\n      <g fill=\"none\" stroke-opacity=\"0.4\" stroke-width=\"1.5\">\n        {#each links as link (link.key)}\n          <path d={link.d} stroke={link.color} transition:fade />\n        {/each}\n      </g>\n      <g class=\"node\">\n        {#each root.descendants() as d (JSON.stringify(d.data.path))}\n          <g\n            transform={`translate(${d.x},${d.y})`}\n            on:mousedown={e => {\n              if (e.button === 0) {\n                if (e.ctrlKey) {\n                  loadMore(d.data);\n                } else {\n                  select(d.data);\n                }\n              }\n            }}\n            on:contextmenu|preventDefault={remove(d.data.path, d.data.name)}>\n            <circle fill={nodeColor(d.data)} r=\"10\" transition:fade />\n            <text\n              class=\"label\"\n              dy=\"0.31em\"\n              text-anchor=\"middle\"\n              transition:fade>\n              {d.data.name}\n            </text>\n            {#if d.data.pendingLoad}\n              <text\n                class=\"label\"\n                dy=\"2.31em\"\n                text-anchor=\"middle\"\n                fill=\"white\"\n                transition:fade>\n                +{parseInt(d.data.pendingLoad) * 4}\n              </text>\n            {/if}\n          </g>\n        {/each}\n      </g>\n    </g>\n  </svg>\n{/if}\n",
    "<script>\n\n</script>\n\n<style>\n  .container {\n    display: flex;\n    flex-direction: column;\n    padding: 12px;\n  }\n</style>\n\n<div class=\"container\">\n  <h1>Links</h1>\n  <span>\n    <a href=\"https://openai.com/blog/musenet/\">\n      Music generation using Musenet's API\n    </a>\n  </span>\n  <span>\n    <a href=\"https://github.com/stevenwaterman/musetree\">\n      Source code available on Github\n    </a>\n  </span>\n  <span>\n    <a href=\"http://www.stevenwaterman.uk\">Developed by Steven Waterman</a>\n  </span>\n</div>\n",
    "<script>\n  import { selectedTrackStore } from \"./trackTree.js\";\n  import { audioStatusStore } from \"./audio.js\";\n  import {\n    yScaleStore,\n    autoScrollStore,\n    isScrollingStore\n  } from \"../settings.js\";\n  import { create_in_transition } from \"svelte/internal\";\n\n  function traverse(node, { startTime }) {\n    const track = $selectedTrackStore;\n    if (track == null) return;\n\n    const endTime = track.endsAt;\n    const transTime = endTime - startTime;\n\n    return {\n      duration: transTime * 1000,\n      tick: t => {\n        const startPx = startTime * $yScaleStore;\n        const endPx = endTime * $yScaleStore;\n        const transPx = endPx - startPx;\n        const y = startPx + t * transPx;\n        node.style = `top:${y}px;`;\n        if ($isScrollingStore) {\n          node.scrollIntoView({\n            block: \"center\",\n            behaviour: \"smooth\"\n          });\n        }\n      }\n    };\n  }\n\n  let element;\n  let transition;\n  let visible = false;\n\n  audioStatusStore.subscribe(({ playing, time }) => {\n    if (transition) transition.end();\n    visible = playing;\n    if (visible) {\n      isScrollingStore.set($autoScrollStore);\n      transition = create_in_transition(element, traverse, {\n        startTime: time\n      });\n      transition.start();\n    }\n  });\n</script>\n\n<style>\n  .anchor {\n    position: relative;\n    top: 0;\n    height: 0;\n    width: 100%;\n    z-index: 2;\n    pointer-events: none;\n  }\n\n  .line {\n    position: absolute;\n    height: 2px;\n    width: 100%;\n    z-index: 2;\n    background-color: rgba(255, 255, 255, 0.5);\n    pointer-events: none;\n    margin: 0 -1.5px;\n  }\n</style>\n\n<div\n  bind:this={element}\n  on:introend={() => {\n    visible = false;\n  }}\n  class=\"anchor\">\n  <div hidden={!visible} class=\"line\" />\n</div>\n",
    "<script>\n  import { deriveNodeStore, trackTreeStore } from \"./trackTree.js\";\n  import { request } from \"../broker.js\";\n  import { configStore, autoRequestStore } from \"../settings.js\";\n  import { slide } from \"svelte/transition\";\n  import { audio } from \"./audio.js\";\n  import ChildButton from \"./ChildButton.svelte\";\n\n  export let path;\n\n  $: nodeStore = deriveNodeStore(path);\n\n  $: children = $nodeStore.children ? $nodeStore.children : {};\n  $: track = $nodeStore.track ? $nodeStore.track : null;\n  $: duration = track ? track.endsAt : 0;\n  $: pendingLoad = $nodeStore.pendingLoad;\n\n  function loadMore() {\n    const pathCapture = path;\n    const encoding = track ? track.encoding : \"\";\n\n    nodeStore.requestStart();\n\n    return request($configStore, encoding, duration)\n      .then(tracks => trackTreeStore.addTracks(pathCapture, tracks))\n      .finally(_ => trackTreeStore.requestDone(pathCapture));\n  }\n  $: if (\n    $autoRequestStore &&\n    !$nodeStore.childOffset &&\n    !pendingLoad\n  )\n    loadMore();\n</script>\n\n<style>\n  .buttonRow {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    flex-grow: 0;\n    flex-shrink: 0;\n    background: black;\n    border-top: 1px solid white;\n    justify-content: center;\n  }\n  .rowButton {\n    margin: 4px;\n    padding: 4px;\n  }\n</style>\n\n<div class=\"buttonRow\">\n  {#each Object.keys(children) as idx}\n    <ChildButton {path} siblingId={idx} />\n  {/each}\n  <button class=\"rowButton\" on:click={loadMore}>\n    Load More{pendingLoad ? ` (${pendingLoad * 4} pending)` : ''}\n  </button>\n  <button\n    class=\"rowButton\"\n    on:click={() => console.log(JSON.stringify($nodeStore))}>\n    Log\n  </button>\n</div>\n",
    "<script>\n  import {\n    deriveNodeStore,\n    trackTreeStore,\n    selectedPathStore,\n    selectedTrackAudioStore\n  } from \"./trackTree.js\";\n  import { afterUpdate, onMount } from \"svelte\";\n  import { configStore, yScaleStore } from \"../settings.js\";\n  import { fade } from \"svelte/transition\";\n  import {\n    instruments,\n    instrumentSettings,\n    pitchMin,\n    pitchRange\n  } from \"../constants.js\";\n  import { audio } from \"./audio.js\";\n\n  export let path;\n  export let section;\n  let canvas;\n\n  let clientWidth;\n  let clientHeight;\n  $: xScale = clientWidth / pitchRange;\n\n  $: nodeStore = deriveNodeStore(path);\n  $: track = $nodeStore ? $nodeStore.track : null;\n  $: notes = track ? track.notes : null;\n  $: startsAt = track ? track.startsAt : null;\n  $: sectionDuration = track ? track.endsAt - startsAt : 0;\n  $: height = sectionDuration * $yScaleStore;\n  $: position = startsAt * $yScaleStore;\n\n  afterUpdate(() => setTimeout(draw, 0));\n\n  function draw() {\n    if (canvas == null || notes == null) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const border = \"white\";\n    ctx.strokeStyle = border;\n    ctx.lineWidth = 1;\n    ctx.moveTo(0, canvas.height - 0.5);\n    ctx.lineTo(canvas.width, canvas.height - 0.5);\n    ctx.stroke();\n\n    Object.keys(notes).forEach((instrument, idx) => {\n      const instrumentNotes = notes[instrument];\n      const settings = instrumentSettings[instrument];\n      const { color } = settings;\n\n      drawInstrument(\n        ctx,\n        instrumentNotes,\n        color,\n        idx / Object.keys(instrumentSettings).length,\n        \"black\"\n      );\n    });\n\n    ctx.fillStyle = \"white\";\n    ctx.textAlign = \"right\";\n    ctx.font = \"14px arial\";\n    const text = `Section ${section + 1}: ${path[path.length - 1]}`;\n    ctx.fillText(text, canvas.width - 2.5, 12.5);\n  }\n\n  function drawInstrument(ctx, notes, color, xOffset, background) {\n    ctx.fillStyle = color;\n    ctx.strokeStyle = background;\n    ctx.lineWidth = 1;\n\n    notes.forEach(note => {\n      const xStart =\n        Math.round((xOffset + note.pitch - pitchMin) * xScale) + 0.5;\n      const yStart = Math.round(note.time_on * $yScaleStore) + 0.5;\n      const noteWidth = Math.round(xScale);\n      const noteHeight = Math.round(note.duration * $yScaleStore);\n      ctx.fillRect(xStart, yStart, noteWidth, noteHeight);\n      if (noteHeight > 2) ctx.strokeRect(xStart, yStart, noteWidth, noteHeight);\n    });\n  }\n\n  function play(event) {\n    const rect = event.target.getBoundingClientRect();\n    const y = event.clientY - rect.top;\n    const fraction = y / height;\n    const addDuration = sectionDuration * fraction;\n    const totalDuration = track.startsAt + addDuration;\n    audio.play(totalDuration);\n  }\n</script>\n\n<style>\n  .trackCanvas {\n    position: relative;\n    cursor: pointer;\n    width: 100%;\n    margin-top: -3px;\n  }\n</style>\n\n{#if notes}\n  <canvas\n    bind:clientWidth\n    bind:clientHeight\n    class=\"trackCanvas\"\n    on:click={play}\n    on:contextmenu|preventDefault={nodeStore.deselect}\n    bind:this={canvas}\n    width={clientWidth}\n    {height} />\n{/if}\n",
    "<script>\n  import { instrumentStores } from \"../settings.js\";\n  export let instrument;\n  $: enabledStore = instrumentStores[instrument];\n  $: id = \"instrument-\" + instrument;\n</script>\n\n<style>\n  .row{\n    display:flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  label {\n    margin: 0;\n  }\n\n  input {\n    margin: 0 8px;\n  }\n</style>\n\n<div class=\"row\">\n  <input {id} type=\"checkbox\" bind:checked={$enabledStore} />\n  <label for={id}>{instrument}</label>\n</div>\n",
    "<script>\n  import { deriveNodeStore, trackTreeStore } from \"./trackTree.js\";\n  import { audio } from \"./audio.js\";\n  import { preplayStore, autoPlayStore } from \"../settings.js\";\n\n  export let path;\n  export let siblingId;\n\n  $: parentNodeStore = deriveNodeStore(path);\n  $: highlight = $parentNodeStore.lastSelected === siblingId;\n  $: startsAt = $parentNodeStore.track ? $parentNodeStore.track.endsAt : 0;\n\n  function select() {\n    trackTreeStore.select(path, siblingId);\n    const playFrom = Math.max(0, startsAt - $preplayStore);\n    if ($autoPlayStore) {\n      audio.play(playFrom);\n    }\n  }\n\n  function remove() {\n    parentStore.deleteChild(siblingId);\n  }\n</script>\n\n<style>\n  .childButton {\n    font-weight: 700;\n    min-width: 40px;\n    background: white;\n    margin: 4px;\n    padding: 4px;\n    border: 1px solid black;\n    cursor: pointer;\n    text-align: center;\n  }\n  .highlight {\n    background: #aaa;\n  }\n</style>\n\n<button\n  class=\"childButton\"\n  class:highlight\n  on:click={select}\n  on:contextmenu|preventDefault={remove}>\n  {siblingId}\n</button>\n"
  ],
  "names": [],
  "mappings": "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"
}